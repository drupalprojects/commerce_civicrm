<?php

/**
 * @file
 * Integrates Drupal Commerce with CiviCRM.
 * Based largely on uc_civicrm, so thanks to dharmatech and AJA for their work
 * there.
 */

/**
 * Implements hook_help().
 */
function commerce_civicrm_help($path = 'admin/help#commerce_civicrm') {
  switch ($path) {
    case 'admin/help#commerce_civicrm':
      return t('This module integrates Drupal Commerce with CiviCRM. When a customer purchases something from the online store, their billing name and address information is added to CiviCRM, while existing contact records are updated. If the commerce_shipping module is used, their shipping name and address is also recorded in CiviCRM as their "Home" address. The contact is added to a group and an activity record of type "Purchase" is added to their history.');
  }
}

<<<<<<< HEAD

/**
 * Implements hook_civicrm_tabs().
 */
function commerce_civicrm_civicrm_tabs(&$tabs, $cid) {
=======
/**
 * Implements hook_views_api().
 */
function commerce_civicrm_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'commerce_civicrm'),
  );
}


/**
 *
 * Implements hook_civicrm_tabset()
 *
 */

function commerce_civicrm_civicrm_tabset($tabsetname, &$tabs, $context) {
>>>>>>> e4b2f57... initial commit after upgrade
  if (!civicrm_initialize()) {
    return;
  }

<<<<<<< HEAD
=======
  $cid = $context['contact_id'];
>>>>>>> e4b2f57... initial commit after upgrade
  $uid = CRM_Core_BAO_UFMatch::getUFId($cid);
  if (empty($uid)) {
    return;
  }

  $customer = user_load($uid);
<<<<<<< HEAD
  $history = commerce_civicrm_display_contact_transactions($customer, FALSE);
  $count = count($history['orders']['#rows']);
=======
  $count = commerce_civicrm_display_contact_transactions($customer, TRUE);
>>>>>>> e4b2f57... initial commit after upgrade

  $tab = array(
    'id' => 'purchases',
    'title' => t('Purchases'),
    'count' => $count,
    'weight' => 99,
  );

  if ($count > 0) {
<<<<<<< HEAD
    $tab['url'] = url('admin/commerce/civicrm/customer/orders/' . $uid);
  }
  $tabs[] = $tab;
=======
    $tab['url'] = url('civicrm/customer/orders/' . $uid);
  }
  $tabs[] = $tab;

>>>>>>> e4b2f57... initial commit after upgrade
}


/**
 * Implements hook_menu().
 */
function commerce_civicrm_menu() {
<<<<<<< HEAD
<<<<<<< HEAD
  $items['admin/commerce/civicrm/customer/orders/%user'] = array(
    'title'            => 'CiviCRM',
    'page callback'    => 'commerce_civicrm_display_contact_transactions',
    'page arguments'   => array(5),
    'access arguments' => array('administer CiviCRM'),
    'type'             => MENU_CALLBACK,
  );

=======
   $items['civicrm/customer/orders/%user'] = array(
    'title'            => 'CiviCRM',
    'page callback'    => 'commerce_civicrm_display_contact_transactions',
    'page arguments'   => array(3),
=======
  $items['civicrm/customer/orders/%user'] = array(
    'title' => 'CiviCRM',
    'page callback' => 'commerce_civicrm_display_contact_transactions',
    'page arguments' => array(3),
>>>>>>> a7d3041... code cleanup
    'access arguments' => array('view all contacts'),
    'type' => MENU_CALLBACK,
  );
>>>>>>> e4b2f57... initial commit after upgrade
  $items['admin/commerce/config/civicrm'] = array(
    'title' => 'CiviCRM',
    'description' => 'Configure Drupal Commerce and CiviCRM integration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_civicrm_admin'),
    'access arguments' => array('configure store'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}


/**
<<<<<<< HEAD
=======
 * Implements hook_civicrm_links().
 *
 * Add a 'create order' link to the actions dropdown on a CiviCRM contact screen.
 *
 * @param $op
 * @param $objectname
 * @param $objectid
 * @return array
 */
function commerce_civicrm_civicrm_links($op, $objectname, $objectid) {
  civicrm_initialize();
  global $base_url;
  $links = array();
  $uid = '';
  $cid = $_GET['cid'];
  if ($cid && is_numeric($cid)) {
    // Get the Drupal uid for the CiviCRM contact if there is a match
    $params = array('contact_id' => $cid, 'version' => 3, 'sequential' => 1);
    $uf_match = civicrm_api3('uf_match', 'get', $params);
    if (!empty($uf_match['id']) && count($uf_match['values'] == 1)) {
      $uid = $uf_match['id'];
    }
    switch ($objectname) {
      case 'Contact':
        $links[] = array(
          'title' => t('Add new Drupal Commerce order for this contact'),
          'url' => $base_url . '/admin/commerce/orders/add/' . $uid . '?cid=' . $cid,
          'weight' => 10,
        );
        break;
    }
  }
  return $links;
}


/**
 * Implements of hook_form_FORMID_alter().
 *
 * @param $form
 * @param $form_state
 */
function commerce_civicrm_form_commerce_order_ui_order_form_alter(&$form, &$form_state) {
  if (!isset($form_state['commerce_order']->order_id) && !empty($_GET['cid']) && is_numeric($_GET['cid'])) {
    commerce_civicrm_prefill_order_form_with_civi_data($form, $form_state, $_GET['cid']);
  }
}


/**
 * Update CiviCRM contact when order is updated.
 *
 * @param $order
 *   The order object to be saved.
 *
 * @see rules_invoke_all()
 */
function commerce_civicrm_commerce_order_presave($order) {
  // Only update when a new order revision is being saved.
  civicrm_initialize();
  $statuses = array(
    'checkout_review',
    'cart',
    'checkout_checkout',
    'checkout_delivery_address',
    'checkout_shipping',
    'checkout_complete',
    'checkout_payment',
    'pending',
  );
  if (!in_array($order->status, $statuses)) {
    commerce_civicrm_action_order_civicrm($order);
  }
}


/**
 * Allows you to prepare payment transaction data before it is saved.
 *
 * @param $transaction
 *   The payment transaction object to be saved.
 *
 * @see rules_invoke_all()
 */
function commerce_civicrm_commerce_payment_transaction_insert($transaction) {
  $order = commerce_order_load($transaction->order_id);
  $cid = _commerce_civicrm_get_cid($order);
  if (!$cid) {
    $mail = _commerce_civicrm_get_mail_from_order($order);
    $params = array('version' => 3, 'sequential' => 1, 'contact_type' => 'Individual', 'email' => $mail);
    $result = civicrm_api3('Contact', 'create', $params);
    $cid = $result['id'];
  }
  _commerce_civicrm_add_contribution($cid, $order, $transaction);
}


/**
 * Prefill a commerce order form with address data from a CiviCRM Contact.
 *
 * @param $form
 * @param $form_state
 * @param $cid
 *   CiviCRM contact id
 */
function commerce_civicrm_prefill_order_form_with_civi_data(&$form, &$form_state, $cid) {
  civicrm_initialize();

  // Save the CiviCRM contact id onto the order.
  $form_state['commerce_order']->data['cid'] = $cid;

  // Get the CiviCRM Contact object.
  $params = array('id' => $cid, 'version' => 3, 'sequential' => 0);
  $result = civicrm_api3('Contact', 'get', $params);
  $contact = $result['values'][$cid];

  // Set the order primary mail to the contacts email
  $form_state['commerce_order']->mail = $contact['email'];

  // Get the shipping_profile and shipping_address so we can work with them easier.
  $shipping_profile = $form['commerce_customer_shipping']['und']['profiles'][0];
  $shipping_address = $shipping_profile['commerce_customer_address']['und'][0];
  // TODO make email field configurable - relies on field being 'field_email' currently.
  $shipping_profile['field_email']['und'][0]['email']['#default_value'] = $contact['email'];
  // TODO make phone field configurable - relies on field being 'field_phone' currently.
  $shipping_profile['field_phone']['und'][0]['phone']['#default_value'] = $contact['phone'];
  $shipping_address['street_block']['thoroughfare']['#value'] = $contact['street_address'];
  $shipping_address['street_block']['premise']['#value'] = $contact['supplemental_address_1'];
  $shipping_address['locality_block']['postal_code']['#value'] = $contact['postal_code'];
  $shipping_address['locality_block']['administrative_area']['#value'] = $contact['state_province_name'];
  $shipping_address['locality_block']['locality']['#value'] = $contact['city'];
  $shipping_address['name_block']['name_line']['#value'] = $contact['display_name'];
  // Add shipping_profile and shipping_address back into the form.
  $shipping_profile['commerce_customer_address']['und'][0] = $shipping_address;
  $form['commerce_customer_shipping']['und']['profiles'][0] = $shipping_profile;

  // Get the billing_profile and billing_address so we can work with them easier.
  $billing_profile = $form['commerce_customer_billing']['und']['profiles'][0];
  $billing_address = $billing_profile['commerce_customer_address']['und'][0];
  // TODO make email field configurable - relies on field being 'field_email' currently.
  $billing_profile['field_email']['und'][0]['email']['#default_value'] = $contact['email'];
  // TODO make phone field configurable - relies on field being 'field_phone' currently.
  $billing_profile['field_phone']['und'][0]['value']['#default_value'] = $contact['phone'];
  $billing_address['street_block']['thoroughfare']['#value'] = $contact['street_address'];
  $billing_address['street_block']['premise']['#value'] = $contact['supplemental_address_1'];
  $billing_address['locality_block']['postal_code']['#value'] = $contact['postal_code'];
  $billing_address['locality_block']['administrative_area']['#value'] = $contact['state_province_name'];
  $billing_address['locality_block']['locality']['#value'] = $contact['city'];
  $billing_address['name_block']['name_line']['#value'] = $contact['display_name'];
  // Add billing_profile and billing_address back into the form.
  $billing_profile['commerce_customer_address']['und'][0] = $billing_address;
  $form['commerce_customer_billing']['und']['profiles'][0] = $billing_profile;
}


/**
>>>>>>> e4b2f57... initial commit after upgrade
 * Display order information in a CiviCRM tab.
 *
 * @param $customer
 *   Drupal user object for the customer
<<<<<<< HEAD
 * @param $render
 *   If true, render the output and print it to the screen.
 */
function commerce_civicrm_display_contact_transactions($customer, $render = TRUE) {
=======
 * @param $count
 *   If true, just return the number of purchases.
 */
function commerce_civicrm_display_contact_transactions($customer, $count = FALSE) {
>>>>>>> e4b2f57... initial commit after upgrade
  if (!civicrm_initialize()) {
    return;
  }

<<<<<<< HEAD
<<<<<<< HEAD
  $output = _commerce_civicrm_display_customer_orders($customer);
  if ($render) {
    print render($output);
  }
  else {
    return $output;
  }

  return;
=======
  $path = drupal_get_path('module', 'commerce_civicrm');

=======
>>>>>>> 237638b... fixed the purchases tab
  if ($count) {
    return _commerce_civicrm_count_customer_orders($customer);
  }

  $view = views_get_view('commerce_civicrm_orders_by_user');
<<<<<<< HEAD
  $output = $view->execute_display('default', array($customer->uid));

  CRM_Core_Page_AJAX::returnJsonResponse($script . $output);
  //print render($output);
  //return;
>>>>>>> e4b2f57... initial commit after upgrade
=======
  $output =  $view->execute_display('default', array($customer->uid));
  CRM_Core_Page_AJAX::returnJsonResponse($output);
>>>>>>> 237638b... fixed the purchases tab
}


/**
 * Admin form configuration.
 */
function commerce_civicrm_admin() {
  if (!civicrm_initialize()) {
    return;
  }
<<<<<<< HEAD
  require_once 'api/v2/Group.php';
  require_once 'CRM/Core/Config.php';

  $params = array();
  $groups = civicrm_group_get($params);
  $options = array();
  foreach ($groups as $group) {
    $options[$group['id']] = $group['title'];
  }
  natsort(&$options);

  // Get contribution types.
  // Note, no {} on table name because it's in civicrm db.
  $sql = "SELECT id, name FROM civicrm_contribution_type WHERE is_active = 1";
=======
  require_once 'api/v3/Group.php';
  require_once 'CRM/Core/Config.php';

  $options = array();
  $result = civicrm_api3('Group', 'get', array(
    'sequential' => 1,
    'return' => array("id", "title"),
  ));
  foreach ($result['values'] as $group) {
    $options[$group['id']] = $group['title'];
  }
  natsort($options);

  // Get contribution types.
  // Note, no {} on table name because it's in civicrm db.
  $sql = "SELECT id, name FROM civicrm_financial_type WHERE is_active = 1";
>>>>>>> e4b2f57... initial commit after upgrade
  $dao =& CRM_Core_DAO::executeQuery($sql, array());
  $types = array(0 => t('Select a type...'));
  while ($dao->fetch()) {
    $types[$dao->id] = $dao->name;
  }

  $form = array();
  $form['commerce_civicrm_financial_type'] = array(
    '#type' => 'select',
    '#title' => t('Financial type'),
    '#default_value' => variable_get('commerce_civicrm_financial_type', array()),
    '#options' => $types,
    '#required' => TRUE,
    '#description' => t('Select a financial type for purchases, making a new type with a name like "Drupal purchase" is recommended.'),
  );

  $form['commerce_civicrm_groups'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Groups to add purchasers to'),
    '#default_value' => variable_get('commerce_civicrm_groups', array()),
    '#options' => $options,
  );

  return system_settings_form($form);
}


/**
 * Called when the an order is created or changed. Creates a new order or
 * updates an existing one.
 *
 * @param $order
 *   the order
 */
function commerce_civicrm_action_order_civicrm($order) {
<<<<<<< HEAD
  global $user;

=======
>>>>>>> e4b2f57... initial commit after upgrade
  if (!civicrm_initialize()) {
    return;
  }

<<<<<<< HEAD
  require_once 'CRM/Core/BAO/UFMatch.php';
  require_once 'api/v2/Contact.php';

  // Find or create a CiviCRM contact ID for the customer.
  $cid = _commerce_civicrm_get_cid($order);
  if ($cid === FALSE) {
    return;
  }

  $cid = _commerce_civicrm_add_update_contact($cid, $order);
  if ($cid === FALSE) {
    return;
  }

  // Add the contribution record.
  _commerce_civicrm_add_contribution($cid, $order);
=======
  // Find or create a CiviCRM contact ID for the customer.
  $cid = _commerce_civicrm_get_cid($order);
  if (!$cid) {
    $mail = _commerce_civicrm_get_mail_from_order($order);
    $params = array('version' => 3, 'sequential' => 1, 'contact_type' => 'Individual', 'email' => $mail);
    $result = civicrm_api3('Contact', 'create', $params);
    $cid = $result['id'];
  }

  // Update the contact.
  _commerce_civicrm_update_contact($cid, $order);
>>>>>>> e4b2f57... initial commit after upgrade

  // Add this contact to selected groups.
  _commerce_civicrm_add_to_groups($cid);
}

<<<<<<< HEAD
=======
// TODO we really need to be able to specify which fields are email fields.
// This is critical for creating contacts in Civi.
function _commerce_civicrm_get_mail_from_order($order) {
  if ($order->mail) {
    return $order->mail;
  }
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  if ($billing_profile = $order_wrapper->commerce_customer_billing->value()) {
    $billing_profile_wrapper = entity_metadata_wrapper('commerce_customer_profile', $billing_profile);
    return $billing_profile_wrapper->field_email->value();
  }

}
>>>>>>> e4b2f57... initial commit after upgrade

/**
 * Add contact to any specified groups.
 *
 * @param $cid
 *   CRM_Contact_BAO_Group object describing the contact to add
 */
function _commerce_civicrm_add_to_groups($cid) {
<<<<<<< HEAD
  require_once 'api/v2/GroupContact.php';
=======
  require_once 'api/v3/GroupContact.php';
>>>>>>> e4b2f57... initial commit after upgrade

  $groups = variable_get('commerce_civicrm_groups', '');
  if (empty($groups)) {
    return;
  }

  foreach ($groups as $id => $key) {
    if ($key != 0) {
      $params = array('contact_id' => $cid, 'group_id' => $key);
<<<<<<< HEAD
      $result = civicrm_group_contact_add($params);
=======
      $result = civicrm_api3('GroupContact', 'create', $params);
>>>>>>> e4b2f57... initial commit after upgrade
      if (!empty($result['is_error'])) {
        watchdog('commerce_civicrm', 'Error adding contact to group: %error', array('%error' => $result['error_message']), WATCHDOG_ERROR);
      }
    }
  }
}


/**
 * Get contact id for the customer.
 *
 * @param $order
 *   Order
 * @return
 *   false|integer false   => an error occured
 *                 integer => CID if non-zero; must create if zero
 */
function _commerce_civicrm_get_cid($order) {
<<<<<<< HEAD
  // Logged in user.
  if ($order->uid) {
    global $user;
    $match = CRM_Core_BAO_UFMatch::synchronizeUFMatch($user, $order->uid, $order->mail, 'Drupal', FALSE, 'Individual');
=======
  if (!civicrm_initialize()) {
    return;
  }

  require_once 'CRM/Core/BAO/UFMatch.php';
  require_once 'api/v3/Contact.php';

  // Order created from CiviCRM
  if (isset($order->data['cid'])) {
    return $order->data['cid'];
  }

  $mail = _commerce_civicrm_get_mail_from_order($order);

  // Logged in user.
  if ($order->uid) {
    global $user;
<<<<<<< HEAD
    $match = CRM_Core_BAO_UFMatch::synchronizeUFMatch($user, $order->uid,  $mail, 'Drupal', FALSE, 'Individual');
>>>>>>> e4b2f57... initial commit after upgrade
=======
    $match = CRM_Core_BAO_UFMatch::synchronizeUFMatch($user, $order->uid, $mail, 'Drupal', FALSE, 'Individual');
>>>>>>> a7d3041... code cleanup
    if (!is_object($match)) {
      return FALSE;
    }
    return $match->contact_id;
  }

  // Anonymous user.
<<<<<<< HEAD
  // Look in the CiviCRM contacts table for a contact that matches the primary email.
  $params = array('email' => $order->mail, 'return.contact_id' => TRUE);
  $contact = civicrm_contact_search($params);
  if (!empty($contact['is_error'])) {
    watchdog('commerce_civicrm', 'civicrm_contact_search(): %error', array('%error' => $contact['error_message']), WATCHDOG_ERROR);
    return FALSE;
  }

  // No matches found, so we will need to create a contact.
  if (count($contact) == 0) {
    return 0;
  }
  $cid = array_shift($contact);

  return $cid;
=======
  // Try to find a match based on email.
  $contact_search_results = civicrm_api3('Contact', 'get', array(
    'email' => $mail,
    'version' => 3,
    'return' => array(
      'contact_id',
      'contact_source',
    )
  ));
  if (!empty($contact_search_results['is_error'])) {
    watchdog('commerce_civicrm', 'civicrm_api3_contact_get(): %error', array('%error' => $contact_search_results['error_message']), WATCHDOG_ERROR);
    return FALSE;
  }

  switch (count($contact_search_results['values'])) {
    case 0:
      return 0;
    case 1:
      return $contact_search_results['id'];
    default:
      foreach ($contact_search_results['values'] as $contact) {
        if ($contact['contact_source'] == t('Drupal Commerce purchase')) {
          return $contact['contact_id'];
        }
      }
      return 0;
  }
>>>>>>> e4b2f57... initial commit after upgrade
}


/**
<<<<<<< HEAD
 *  Add or update contact information.
 */
function _commerce_civicrm_add_update_contact($cid, $order) {
  require_once 'api/v2/Location.php';

  $contact = array();

  if ($cid != 0) {
    $params = array(
      'contact_id' => $cid,
      'return.contact_id'        => 1,
      'return.contact_source'    => 1,
    );
    $contact = civicrm_contact_search($params);
    if (!empty($contact['is_error'])) {
      watchdog('commerce_civicrm', 'civicrm_contact_search(): %error', array('%error' => $contact['error_message']), WATCHDOG_ERROR);
      return FALSE;
    }
    $contact = array_shift($contact);
    $contact['contact_id'] = $cid;
    if (!empty($contact['contact_source'])) {
      $contact['source']     = $contact['contact_source'];
    }
    unset($contact['contact_source']);
  }

=======
 * Update contact information.
 * @params $cid int CiviCRM contact id
 * @params $order Drupal order object
 */
function _commerce_civicrm_update_contact($cid, $order) {
  if (!civicrm_initialize()) {
    return;
  }

  // Needed for civicrm_location_update
  require_once 'api/v3/Address.php';

  // Ensure we have a contact
  if (!$cid) {
    return;
  }

  // Get the contact object from the contact id
  $result = civicrm_api3('Contact', 'get', array('id' => $cid, 'version' => 3, 'sequential' => 1));
  $contact = $result['values'][0];

>>>>>>> e4b2f57... initial commit after upgrade
  // Get customer profile information.
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $billing_profile = $order_wrapper->commerce_customer_billing->value();
  $billing_profile_wrapper = entity_metadata_wrapper('commerce_customer_profile', $billing_profile);
  $billing_address = $billing_profile_wrapper->commerce_customer_address->value();

  // If we have a full name field, split it.
  if (!empty($billing_address['name_line'])) {
<<<<<<< HEAD
=======
    $contact['display_name'] = $billing_address['name_line'];
>>>>>>> e4b2f57... initial commit after upgrade
    // Assumes user only has one first name and one surname... not ideal.
    $names = preg_split('/\s+/', $billing_address['name_line'], 2);
    $first_name = $names[0];
    $last_name = !empty($names[1]) ? $names[1] : '';
  }
  // Otherwise just pull out the first and last names.
  else {
    $first_name = $billing_address['first_name'];
    $last_name = $billing_address['last_name'];
<<<<<<< HEAD
=======
    $contact['display_name'] = $first_name . ' ' . $last_name;
>>>>>>> e4b2f57... initial commit after upgrade
  }

  // Prepare array to update contact via Civi API.
  $contact['last_name'] = $last_name;
  $contact['first_name'] = $first_name;
  $contact['sort_name'] = "{$last_name}, {$first_name}";
  $contact['display_name'] = $billing_address['first_name'] . ' ' . $billing_address['last_name'];
<<<<<<< HEAD
  $contact['contact_type'] = 'Individual';
  $contact['email'] = $order->mail;
  if (empty($contact['source'])) {
    $contact['source'] = 'Drupal Commerce purchase';
  }

  // Create contact or update existing contact.
  $result = civicrm_contact_add($contact);
  if (!empty($result['is_error'])) {
    watchdog('commerce_civicrm', 'civicrm_contact_add(): %error', array('%error' => $rc['error_message']), WATCHDOG_ERROR);
    return FALSE;
  }

  // Billing location.
  $address = array(
    1 => array(
      'location_type'          => 'Billing',
      'is_primary'             => TRUE,
      'city'                   => $billing_address['locality'],
      'state_province'         => $billing_address['administrative_area'],
      'postal_code'            => $billing_address['postal_code'],
      'street_address'         => $billing_address['thoroughfare'],
      'supplemental_address_1' => $billing_address['premise'],
      'country'                => $billing_address['country'],
    )
  );

  // Phone - TODO: where to get this information?
  //$phone = array();
  //$phone = array(
  //  'phone' => $phone_number,
  //  'is_primary' => TRUE,
  //  'phone_type_id' => 1,
  //  'location_type' => 'Home',
  //);
  //$phones = array($phone);

  // Add / update the location.
  //$params = array('version' => '3.0', 'contact_id' => $cid, 'phone' => $phones, 'address' => $address);
  $params = array('version' => '3.0', 'contact_id' => $cid, 'address' => $address);
  $new_location = civicrm_location_update($params);
  if ($new_location['is_error'] && strpos($new_location['error_message'], "Invalid Location Type(s)") !== FALSE) {
    $new_location = civicrm_location_add($params);
  }

  // Check if we have shipping information.
  if (!empty($order_wrapper->commerce_customer_shipping)) {
    $shipping_profile = $order_wrapper->commerce_customer_shipping->value();
    $shipping_profile_wrapper = entity_metadata_wrapper('commerce_customer_profile', $shipping_profile);
    $shipping_address = $shipping_profile_wrapper->commerce_customer_address->value();

    // Shipping location.
    $address = array(
      1 => array(
        'location_type'          => 'Home',
        'is_primary'             => TRUE,
        'city'                   => $shipping_address['locality'],
        'state_province'         => $shipping_address['administrative_area'],
        'postal_code'            => $shipping_address['postal_code'],
        'street_address'         => $shipping_address['thoroughfare'],
        'supplemental_address_1' => $shipping_address['premise'],
        'country'                => $shipping_address['country'],
      )
    );

    // Add / update the location.
    $params = array('version' => '3.0', 'contact_id' => $cid, 'address' => $address);
    $new_location = civicrm_location_update($params);
    if ($new_location['is_error'] && strpos($new_location['error_message'], "Invalid Location Type(s): Shipping") !== FALSE) {
      $new_location = civicrm_location_add($params);
=======
  $contact['email'] = _commerce_civicrm_get_mail_from_order($order);
  if (empty($contact['source'])) {
    $contact['source'] = t('Drupal Commerce purchase');
  }

  // Update the contact object
  $contact['version'] = 3;
  $contact['sequential'] = 1;

  $result = civicrm_api3('Contact', 'create', $contact);

  $country_id = CRM_Core_DAO::getFieldValue("CRM_Core_DAO_Country", $billing_address['country'], 'id', 'iso_code');
  $state_province_id = CRM_Core_DAO::singleValueQuery("SELECT csp.id FROM civicrm_state_province AS csp LEFT JOIN civicrm_country AS cc ON (csp.country_id = cc.id) WHERE country_id = {$country_id} AND abbreviation = '{$billing_address['administrative_area']}'");

  $address = array(
    'location_type_id' => 5,
    'is_primary' => TRUE,
    'city' => $billing_address['locality'],
    'state_province_id' => $state_province_id,
    'postal_code' => $billing_address['postal_code'],
    'street_address' => $billing_address['thoroughfare'],
    'supplemental_address_1' => $billing_address['premise'],
    'country_id' => $country_id,
  );

  // TODO Phone @see hook_commerce_civicrm_params() for example.

  // Add / update the location.
  $params = array('version' => '3.0', 'contact_id' => $cid) + $address;

  // Allow other modules to alter the data before being sent to CiviCRM.
  foreach (module_implements('commerce_civicrm_params') as $module) {
    $function = $module . '_commerce_civicrm_params';
    $function($params, $order, $cid);
  }

  $new_location = civicrm_api3_address_create($params);

  // Check if we have shipping information.
  if ($shipping_profile = $order_wrapper->commerce_customer_shipping->value()) {
    $shipping_profile_wrapper = entity_metadata_wrapper('commerce_customer_profile', $shipping_profile);
    $shipping_address = $shipping_profile_wrapper->commerce_customer_address->value();

    $country_id = CRM_Core_DAO::getFieldValue("CRM_Core_DAO_Country", $shipping_address['country'], 'id', 'iso_code');
    $state_province_id = CRM_Core_DAO::singleValueQuery("SELECT csp.id FROM civicrm_state_province AS csp LEFT JOIN civicrm_country AS cc ON (csp.country_id = cc.id) WHERE country_id = {$country_id} AND abbreviation = '{$shipping_address['administrative_area']}'");

    // Shipping location.
    $address = array(
      'location_type_id' => 5,
      'is_primary' => TRUE,
      'city' => $shipping_address['locality'],
      'state_province_id' => $state_province_id,
      'postal_code' => $shipping_address['postal_code'],
      'street_address' => $shipping_address['thoroughfare'],
      'supplemental_address_1' => $shipping_address['premise'],
      'country_id' => $country_id,
    );

    // Add / update the location.
    $params = array('version' => '3.0', 'contact_id' => $cid) + $address;
    $new_location = civicrm_api3_address_create($params);

    if ($new_location['is_error'] && strpos($new_location['error_message'], "Invalid Location Type(s) : Home") !== FALSE) {
      $new_location = civicrm_api3_address_create($params);
>>>>>>> e4b2f57... initial commit after upgrade
    }
  }

  // Log the error, but continue.
  if (civicrm_error($new_location)) {
<<<<<<< HEAD
    watchdog('commerce_civicrm', 'civicrm_location_update(): %error', array('%error' => $new_location['error_message']), WATCHDOG_ERROR);
  }

  return $cid;
=======
    watchdog('commerce_civicrm', 'civicrm_api3_address_create(): %error', array('%error' => $new_location['error_message']), WATCHDOG_ERROR);
  }
>>>>>>> e4b2f57... initial commit after upgrade
}


/**
 * Creates required contribution fields if they have not already been created.
<<<<<<< HEAD
 */
function _commerce_civicrm_create_custom_contribution_fields() {
  $group_id = variable_get('commerce_civicrm_contribution_group_id', FALSE);
  if ($group_id != FALSE) {
    return;
  }

  require_once 'CRM/Core/Config.php';
  require_once 'api/v2/CustomGroup.php';
=======
 * This function will get call only once when this module get installed
 */
function _commerce_civicrm_create_custom_contribution_fields() {
  $group_id = variable_get('commerce_civicrm_contribution_group_id');
  if ($group_id) {
    return;
  }
  if (!civicrm_initialize()) {
    return;
  }
  require_once 'CRM/Core/Config.php';
  require_once 'api/v3/CustomGroup.php';
>>>>>>> e4b2f57... initial commit after upgrade

  // First we need to check if the Sales Tax and Shipping custom fields have
  // already been created.
  $params = array(
<<<<<<< HEAD
<<<<<<< HEAD
=======
    
>>>>>>> e4b2f57... initial commit after upgrade
    'title'            => 'Drupal Commerce Purchases',
    'name'             => 'commerce_purchases',
    'extends'          => array('Contribution'),
    'weight'           => 1,
=======

    'title' => 'Drupal Commerce Purchases',
    'name' => 'commerce_purchases',
    'extends' => array('Contribution'),
    'weight' => 1,
>>>>>>> a7d3041... code cleanup
    'collapse_display' => 0,
    'is_active' => 1,
  );
<<<<<<< HEAD
<<<<<<< HEAD
  $custom_group = civicrm_custom_group_create($params);
=======
  
=======

>>>>>>> a7d3041... code cleanup
  $custom_group = civicrm_api3('CustomGroup', 'create', $params);
>>>>>>> e4b2f57... initial commit after upgrade
  variable_set('commerce_civicrm_contribution_group_id', $custom_group['id']);

  $params = array(
    'custom_group_id' => $custom_group['id'],
    'label' => 'Sales Tax',
    'html_type' => 'Text',
    'data_type' => 'String',
    'weight' => 1,
    'is_required' => 0,
    'is_searchable' => 0,
    'is_active' => 1,
  );
<<<<<<< HEAD
  $tax_field = civicrm_custom_field_create($params);
  variable_set('commerce_civicrm_tax_field_id', $tax_field['result']['customFieldId']);
=======
  $tax_field = civicrm_api3('CustomField', 'create', $params);
  variable_set('commerce_civicrm_tax_field_id', $tax_field['id']);
>>>>>>> e4b2f57... initial commit after upgrade

  $params = array(
    'custom_group_id' => $custom_group['id'],
    'label' => 'Shipping Cost',
    'html_type' => 'Text',
    'data_type' => 'String',
    'weight' => 2,
    'is_required' => 0,
    'is_searchable' => 0,
    'is_active' => 1,
  );
<<<<<<< HEAD
  $shipping_field = civicrm_custom_field_create($params);
  variable_set('commerce_civicrm_shipping_field_id', $shipping_field['result']['customFieldId']);
}


/**
 * Add a contribution record.
 *
 * Create any custom fields and get the transaction id. If it doesn't exist,
 * make one up and add the contribution.
 */
function _commerce_civicrm_add_contribution($cid, &$order) {
  _commerce_civicrm_create_custom_contribution_fields();

  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // TODO: how to handle multiple transactions on one order?
  $transactions = commerce_payment_transaction_load_multiple(array(), array('order_id' => $order->order_id));
  $transaction = array_pop($transactions);
  if (empty($transaction)) {
    $txn_id = time() . '_' . rand(1000, 9999); 
  }
  else {
    $txn_id = $transaction->transaction_id;
  }

  $total = $order_wrapper->commerce_order_total->amount->value();
  $order_total = $total / 100;

  $tax_field_id = variable_get('commerce_civicrm_tax_field_id', '');
  $shipping_field_id = variable_get('commerce_civicrm_shipping_field_id', '');
  $tax_total = 0;
  $shipping_total = 0;

  // Get the tax total.
  if (module_exists('commerce_tax')) {
    $components = $order_wrapper->commerce_order_total->data->value();
    $tax_total = commerce_tax_total_amount($components['components'], TRUE, commerce_default_currency()) / 100;
  }

  // TODO: figure out where to get the shipping total from.

  if (!empty($order_wrapper->data)) {
    $payment_instrument_id = _commerce_civicrm_map_payment_instrument($order_wrapper->data['payment_method']);
  }
  else {
    $payment_instrument_id = _commerce_civicrm_map_payment_instrument('credit');
  }

  $notes = _commerce_civicrm_create_detail_string($order_wrapper);
  $params = array(
    'contact_id' => $cid,
    'receive_date' => date('Ymd'),
    'total_amount' => $order_total,
    'contribution_type_id' => variable_get('commerce_civicrm_contribution_type', ''), // @FIXME this needs a sensible default
    'payment_instrument_id' => $payment_instrument_id,
    'non_deductible_amount' => 00.00,
    'fee_amount' => 00.00,
    'net_amount' => $order_total,
    'trxn_id' => $txn_id,
    'invoice_id' => $order->order_id . '_dc',
    'source' => $notes,
    'contribution_status_id' => _commerce_civicrm_map_contribution_status($order->status),
    'note' => $notes,
  );
  if (!empty($tax_field_id)) {
    $params['custom_' . $tax_field_id] = $tax_total;
  }
=======
  $shipping_field = civicrm_api3('CustomField', 'create', $params);
  variable_set('commerce_civicrm_shipping_field_id', $shipping_field['id']);
}


/*
 * INstall/enable hook_install()
 */
function commerce_civicrm_install() {
  drupal_set_message($message = t('The commerce_civicrm  module was successfully enabled.'), $type = 'status');
  _commerce_civicrm_create_custom_contribution_fields();

}

/*
 * Implement hook_uninstall()
 */

function hook_uninstall() {
  if ($view = views_get_view('commerce_civicrm_orders_by_user')) {
    $view->delete();
  }
}

/**
 * Process transactions on an order.
 *
 * Create any custom fields and process each transaction id.
 */
function _commerce_civicrm_process_transactions($cid, $order) {
  $transactions = commerce_payment_transaction_load_multiple(array(), array('order_id' => $order->order_id));
  foreach ($transactions as $transaction) {
    _commerce_civicrm_add_contribution($cid, $order, $transaction);
  }
}


/**
 * Add a contribution record.
 *
 */
function _commerce_civicrm_add_contribution($cid, $order, $transaction) {
  // Don't add contribution for 'No payment required' method.
  if ($transaction->payment_method == 'commerce_no_payment') {
    return;
  }

  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $total = $order_wrapper->commerce_order_total->amount->value();

  $tax_field_id = variable_get('commerce_civicrm_tax_field_id', '');
  $shipping_field_id = variable_get('commerce_civicrm_shipping_field_id', '');
  $transaction_tax = 0;

  // Get the proportion of tax applied to this transaction.
  if (module_exists('commerce_tax')) {
    $components = $order_wrapper->commerce_order_total->data->value();
    $tax_total = commerce_tax_total_amount($components['components'], TRUE, commerce_default_currency()) / 100;
    $transaction_tax = $tax_total * $transaction->amount / $total;
  }

  // TODO: figure out where to get the shipping total from.
  $shipping_total = 0 * $transaction->amount / $total;
  $total_amount = $total / 100;

  $params = array(
    'version' => 3,
    'contact_id' => $cid,
    'receive_date' => date('Y-m-d h:i:s'),
    'total_amount' => $total_amount,
    'financial_type_id' => variable_get('commerce_civicrm_financial_type', ''),
    // @FIXME this needs a sensible default
    'payment_instrument_id' => _commerce_civicrm_map_payment_instrument($transaction->payment_method),
    'non_deductible_amount' => 00.00,
    'fee_amount' => 00.00,
    'net_amount' => $total_amount,
    'trxn_id' => $transaction->transaction_id . '_dc',
    'invoice_id' => $transaction->transaction_id . '_dc',
    'source' => variable_get('commerce_civicrm_source_name', 'Drupal Commerce'),
    'contribution_status_id' => _commerce_civicrm_map_contribution_status($transaction->status),
    'note' => _commerce_civicrm_create_detail_string($order_wrapper),
  );

  if (!empty($tax_field_id)) {
    $params['custom_' . $tax_field_id] = $transaction_tax;
  }

>>>>>>> e4b2f57... initial commit after upgrade
  if (!empty($shipping_field_id)) {
    $params['custom_' . $shipping_field_id] = $shipping_total;
  }

<<<<<<< HEAD
  require_once 'api/v2/Contribute.php';
  $contribution = civicrm_contribution_add($params);

  // Log the error, but continue.
  if (civicrm_error($contribution)) {
    watchdog('commerce_civicrm', 'civicrm_contribution_add(): %error', array('%error' => $contribution['error_message']), WATCHDOG_ERROR);
  }

  return TRUE;
}


=======
  // Allow other modules to alter the contribution data before being sent to CiviCRM.
  foreach (module_implements('commerce_civicrm_contribution_params') as $module) {
    $function = $module . '_commerce_civicrm_contribution_params';
    $function($params, $order, $cid, $transaction);
  }

  $contribution = civicrm_api3('Contribution', 'create', $params);

  // Log any error.
  if (civicrm_error($contribution)) {
    watchdog('commerce_civicrm', 'civicrm_api3_contribution_create: %error', array('%error' => $contribution['error_message']), WATCHDOG_ERROR);
  }
}


<<<<<<< HEAD

>>>>>>> e4b2f57... initial commit after upgrade
=======
>>>>>>> a7d3041... code cleanup
/**
 * Maps a Drupal Commerce payment method to a CiviCRM payment instrument.
 *
 * @param string $payment_method
 *    A Drupal Commerce payment method
 * @return int
 *    The CiviCRM id of the payment processor
 */
function _commerce_civicrm_map_payment_instrument($payment_method) {
<<<<<<< HEAD
  // TODO: not sure where to get this info, defaulting everything to 'credit'.
  $payment_method = 'credit';

  $map = array(
    'credit' => 1,
    'cod'    => 3,
    'check'  => 4,
=======

  // TODO add support for other payment processors.
  $map = array(
    'credit' => 1,
    'commerce_sagepay' => 1,
    'commerce_cheque' => 2,
<<<<<<< HEAD
    'cod'    => 4,
>>>>>>> e4b2f57... initial commit after upgrade
=======
    'cod' => 4,
>>>>>>> a7d3041... code cleanup
  );

  if (array_key_exists($payment_method, $map)) {
    $id = $map[$payment_method];
  }
  else {
<<<<<<< HEAD
=======
    // TODO add watchdog for missing payment processors?
>>>>>>> e4b2f57... initial commit after upgrade
    $id = 1;
  }

  return $id;
}


/**
 * Maps a Drupal Commerce order status to a corresponding CiviCRM contribution status.
 *
<<<<<<< HEAD
 * @param string $order_status
=======
 * @param string $transaction_status
>>>>>>> e4b2f57... initial commit after upgrade
 *    A Drupal Commerce order status
 * @return int
 *    A CiviCRM order status
 */
<<<<<<< HEAD
function _commerce_civicrm_map_contribution_status($order_status) {
  // NOTE: There may be a more 'correct' way to do this.
  $map = array(
    'completed'         => 1,
    'payment_received'  => 1,
    'pending'           => 2,
    'canceled'          => 3,
    'cart'              => 5,
    'checkout_checkout' => 5,
    'checkout_review'   => 5,
  );

  if (array_key_exists($order_status, $map)) {
    $id = $map[$order_status];
=======
function _commerce_civicrm_map_contribution_status($transaction_status) {
  // NOTE: There may be a more 'correct' way to do this.
  $map = array(
    COMMERCE_PAYMENT_STATUS_SUCCESS => 1,
    COMMERCE_PAYMENT_STATUS_PENDING => 2,
    COMMERCE_PAYMENT_STATUS_FAILURE => 4,
  );

  if (array_key_exists($transaction_status, $map)) {
    $id = $map[$transaction_status];
>>>>>>> e4b2f57... initial commit after upgrade
  }
  // No status mapping found.
  else {
    $id = 1;
<<<<<<< HEAD
    watchdog('commerce_civicrm', 'There is no status that maps to %status marking as "Complete"', array('%status' => $order_status), WATCHDOG_WARNING);
=======
    watchdog('commerce_civicrm', 'There is no status that maps to %status marking as "Complete"', array('%status' => $transaction_status), WATCHDOG_WARNING);
>>>>>>> e4b2f57... initial commit after upgrade
  }

  return $id;
}


/**
 * Create string to insert for purchase activity details.
 */
function _commerce_civicrm_create_detail_string($order_wrapper) {
  $str = '';
  $titles = array();

  // Populate the array of the quantities of the products on the order.
  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
    if (in_array($line_item_wrapper->type->value(), commerce_product_line_item_types())) {
      // Extract a product ID and quantity from the line item.
      $line_item_sku = $line_item_wrapper->commerce_product->sku->value();
      $quantity = $line_item_wrapper->quantity->value();
      $title = $line_item_wrapper->commerce_product->title->value();

      // Update the product's quantity value.
      if (empty($products[$line_item_sku])) {
        $products[$line_item_sku] = $quantity;
        $titles[$title] = $quantity;
      }
      else {
        $products[$line_item_sku] += $quantity;
        $titles[$title] += $quantity;
      }
    }
<<<<<<< HEAD
    
=======
>>>>>>> e4b2f57... initial commit after upgrade
  }

  // Display the product titles and the number purchased.
  if (!empty($titles)) {
    $strings = array();
    foreach ($titles as $title => $quantity) {
      $strings[] = $title . ' x ' . $quantity;
    }
    $str = implode(', ', $strings);
  }

  return $str;
}

<<<<<<< HEAD
// TODO
/**
 * Displays a list of orders made by a customer.
=======
/**
 * Count number of orders made by a customer.
>>>>>>> e4b2f57... initial commit after upgrade
 *
 * @param $customer
 *   The user object for the customer.
 */
<<<<<<< HEAD
function _commerce_civicrm_display_customer_orders($customer) {
  $result = db_select('commerce_order')->extend('PagerDefault')
    ->fields('commerce_order', array('order_id'))
    ->condition('uid', $customer->uid)
    ->orderBy('created', 'DESC')
    ->limit(50)
    ->execute();
  $order_ids = $result->fetchCol();
  $orders = commerce_order_load_multiple($order_ids);

  $header = array(t('Order ID'), t('Date'), t('Billing name'),
                  t('Shipping name'), t('Items'), t('Total'), t('Operations'));
  $rows = array();
  $totals = array('orders' => 0, 'items' => 0, 'total' => 0);
  foreach ($orders as $order) {
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

    // Get billing details.
    $billing_profile = $order_wrapper->commerce_customer_billing->value();
    $billing_profile_wrapper = entity_metadata_wrapper('commerce_customer_profile', $billing_profile);
    $billing_address = $billing_profile_wrapper->commerce_customer_address->value();
    $billing_name = (empty($billing_address['name_line']) ? $billing_address['first_name'] . ' ' . $billing_address['last_name'] : $billing_address['name_line']);

    // Get shipping details.
    $shipping_name = '';
    if (!empty($order_wrapper->commerce_customer_shipping)) {
      $shipping_profile = $order_wrapper->commerce_customer_shipping->value();
      $shipping_profile_wrapper = entity_metadata_wrapper('commerce_customer_profile', $shipping_profile);
      $shipping_address = $shipping_profile_wrapper->commerce_customer_address->value();
      $shipping_name = (empty($shipping_address['name_line']) ? $shipping_address['first_name'] . ' ' . $shipping_address['last_name'] : $shipping_address['name_line']);
    }

    $operations = l('View', 'admin/commerce/orders/' . $order->order_id);
    $operations .= ' ';
    $operations .= l('Edit', 'admin/commerce/orders/' . $order->order_id . '/edit');

    // Update summary stats.
    $quantity = 0;
    if (!empty($order_wrapper->commerce_line_items)) {
      $quantity = commerce_line_items_quantity($order_wrapper->commerce_line_items, commerce_product_line_item_types());
    }
    $totals['items'] += $quantity;
    $totals['orders'] += 1;

    // Order total.
    $currency = $order_wrapper->commerce_order_total->currency_code->value();
    $total = $order_wrapper->commerce_order_total->amount->value();
    $totals['total'] += $total;

    $rows[] = array(
      'data' => array(
        array('data' => $order->order_id),
        array('data' => format_date($order->created)),
        array('data' => check_plain($billing_name)),
        array('data' => check_plain($shipping_name)),
        array('data' => $quantity),
        array('data' => commerce_currency_format($total, $currency)),
        array('data' => $operations),
      ),
      'id' => 'order-' . $order->order_id,
    );
  }

  $build = array();

  $build['description'] = array(
    '#markup' => '<p>' . t('!totals_orders orders shown match that account with !totals_items items purchased and !totals_total spent:', array(
      '!totals_orders' => $totals['orders'],
      '!totals_items' => $totals['items'],
      '!totals_total' => commerce_currency_format($totals['total'], $currency),
    )) . '</p>',
    '#weight' => -5,
  );
  $build['orders'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#attributes' => array('width' => '100%', 'class' => array('commerce-cust-orders-table')),
    '#empty' => t('No orders found.'),
  );
  $build['pager'] = array(
    '#theme' => 'pager',
    '#weight' => 5,
  );

  return $build;
=======
function _commerce_civicrm_count_customer_orders($customer) {
  $count = db_select('commerce_order')
    ->fields('commerce_order', array('order_id'))
    ->condition('uid', $customer->uid)
    ->countQuery()
    ->execute()
    ->fetchField();
  return $count;
>>>>>>> e4b2f57... initial commit after upgrade
}

